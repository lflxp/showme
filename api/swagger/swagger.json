{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/db/": {
            "get": {
                "tags": [
                    "db"
                ],
                "description": "get all Users",
                "operationId": "BboltController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/db/kv": {
            "post": {
                "tags": [
                    "db"
                ],
                "description": "添加一个完整的数据 表、key、value",
                "operationId": "BboltController.CreateBucket",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Bucket content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.Bucket.Key"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/db/kv/info": {
            "post": {
                "tags": [
                    "db"
                ],
                "description": "添加一个针对Tree记录的完整的数据 表、key、value",
                "operationId": "BboltController.CreateBucketInfo",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Bucket content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.Bucket.Key"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/db/tables": {
            "post": {
                "tags": [
                    "db"
                ],
                "description": "只添加表",
                "operationId": "BboltController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Tablename字段中只有tablename字段会被用到",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.Tablename"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/db/tables/{dbname}": {
            "get": {
                "tags": [
                    "db"
                ],
                "description": "获取所有表的数据",
                "operationId": "BboltController.GetAllTables",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dbname",
                        "description": "name of db",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} success"
                    }
                }
            }
        },
        "/db/tables2/{dbname}": {
            "get": {
                "tags": [
                    "db"
                ],
                "description": "获取所有表的数据",
                "operationId": "BboltController.GetAllTables",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dbname",
                        "description": "name of db",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} success"
                    }
                }
            }
        },
        "/db/{dbname}": {
            "get": {
                "tags": [
                    "db"
                ],
                "description": "遍历指定表的所有数据",
                "operationId": "BboltController.GetAll",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dbname",
                        "description": "name of table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} success"
                    }
                }
            }
        },
        "/db/{dbname}/{tablename}": {
            "delete": {
                "tags": [
                    "db"
                ],
                "description": "delete the Table",
                "operationId": "BboltController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dbname",
                        "description": "name of db",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "path",
                        "name": "tablename",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "tablename is empty"
                    }
                }
            }
        },
        "/db/{tablename}/{key}": {
            "get": {
                "tags": [
                    "db"
                ],
                "description": "get user by uid",
                "operationId": "BboltController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tablename",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Bucket"
                        }
                    },
                    "403": {
                        "description": ":tablename is empty"
                    }
                }
            }
        },
        "/db/{uid}": {
            "put": {
                "tags": [
                    "db"
                ],
                "description": "update the user",
                "operationId": "BboltController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            }
        },
        "/object/": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "get all objects",
                "operationId": "ObjectController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "object"
                ],
                "description": "create object",
                "operationId": "ObjectController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The object content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.Object.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/object/{objectId}": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "find object by objectid",
                "operationId": "ObjectController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "the objectid you want to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "object"
                ],
                "description": "update the object",
                "operationId": "ObjectController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "object"
                ],
                "description": "delete the object",
                "operationId": "ObjectController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectId you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "objectId is empty"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users",
                "operationId": "UserController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.User.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The username for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UserController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by uid",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "uid is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Bucket": {
            "title": "Bucket",
            "type": "object",
            "properties": {
                "Dbname": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tablename": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Profile": {
            "title": "Profile",
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "Age": {
                    "type": "integer",
                    "format": "int64"
                },
                "Email": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Profile": {
                    "$ref": "#/definitions/models.Profile"
                },
                "Username": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "object",
            "description": "Operations about object\n"
        },
        {
            "name": "user",
            "description": "Operations about Users\n"
        }
    ]
}