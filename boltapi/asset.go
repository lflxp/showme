package boltapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _main_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6b\x6f\x13\xcd\x15\xfe\x6c\xff\x8a\x61\xaa\xca\x89\x9a\xf5\x25\x2d\x34\x5d\xbc\x56\xc5\x4d\x6d\xbf\x80\x14\x68\x55\x21\x3e\x8c\x77\xc7\xde\x21\xeb\x9d\xd5\xcc\x38\x89\x1b\x45\x0a\x15\x69\xc9\x95\x54\x88\xa6\x29\xa1\x11\xb4\x08\x50\x25\x48\x4b\x80\xe0\xd0\xf2\x67\xb2\xbe\xfc\x8b\x57\xb3\xb3\xeb\xac\x9d\x4d\xde\x44\x81\xf7\x93\xbd\xe7\xf2\x9c\xe7\x9c\x99\x39\x7b\x66\x8b\xe7\xae\x5c\xbf\x7c\xf3\xf7\x37\xae\x02\x5b\xd4\x9c\x52\xba\x18\xfd\x60\x64\x95\xd2\xa9\x62\x0d\x0b\x04\x4c\x1b\x31\x8e\x85\x01\x6f\xdd\xbc\xa6\x8d\x41\x29\x3f\xa7\x69\x80\xd4\x3c\xca\x04\xb8\x3c\x3e\x0e\x34\x4d\x0a\x1d\xe2\x4e\x00\x86\x1d\x03\x72\xd1\x70\x30\xb7\x31\x16\x10\xd8\x0c\x57\x0c\x98\xb3\x08\x17\x39\xe2\x5a\x78\x3a\x6b\x72\x1e\x80\x04\x56\xa5\x74\x2a\x25\x83\x8e\x94\xa9\xd5\x18\xf9\x11\xf2\xbc\x99\x74\x2a\x95\xb2\x31\xa9\xda\x42\x07\x85\x7c\xfe\xc7\x17\xa5\x60\x8a\x58\xc2\x3e\x78\x9e\x4d\xa7\x8a\xb9\x10\xa0\x98\x53\x74\x8b\x12\x42\x02\x5b\x64\x12\x10\xcb\x80\xc8\xf3\x60\x29\x0d\x00\x00\x45\xec\x68\x02\x95\x39\x10\x0d\x0f\x1b\xb0\x4c\x99\x85\x99\x66\x22\x66\x85\x06\x3d\x13\xcd\x43\x2e\x06\x0e\x2a\xcb\x3c\xae\x51\x56\xeb\x19\x28\x93\x0a\x65\x35\x10\xa4\x24\xff\x41\xa0\xd7\xa8\x25\x4d\xd5\x53\xe0\xa7\x05\x5c\x0d\x38\x96\xf7\xa6\x63\xde\x07\xfe\x1a\x11\xb8\x16\xc5\x68\xed\xec\xf9\x8b\xaf\xfc\xb5\x95\xf6\xcb\xed\x3e\x6b\x65\x4f\x5c\xaf\x2e\xc0\xa4\x16\x0b\x93\x75\x51\x0d\xc3\x52\x31\x17\xa9\xfb\x62\xe4\xe2\x41\x4e\x1a\x7d\xb9\xe9\x6f\x6d\x25\x44\xe7\xd8\xc1\xe6\x60\x78\x86\xab\x84\xba\x10\x78\x0e\x32\xb1\x4d\x1d\x0b\x33\x03\x76\xde\x7e\xec\xce\x2d\xb4\x96\x5e\x1f\x83\xa8\x30\xa9\x27\x08\x75\x23\x02\xca\x70\x7f\x77\x0e\x82\x49\xe4\xd4\xb1\x01\xb9\x8d\xdc\xaa\x8d\x48\x98\xa1\x32\x3f\x31\x50\x73\xb9\x07\x54\xc6\xe4\x2e\x71\xab\xc7\xe0\x04\x0a\x95\xe3\x99\x6b\xd8\x5a\xff\xd0\x5d\xdf\x49\xa8\xa1\x49\x1d\xa0\x73\x0f\xb9\x06\x2c\x14\x12\x2b\x62\x21\x81\x35\x8f\x98\x13\x98\x85\x1b\x54\x4a\x06\x0a\x1c\x56\x77\xfd\x45\x6b\x73\x0b\x0e\xac\x88\x34\x2f\x40\x10\x9c\x07\x03\xc6\x8f\x4a\x98\x7c\x2c\x42\x42\x05\x4c\xea\x24\xd3\x36\x1d\xc4\xb9\x01\x1d\xe2\x62\x18\xe5\x30\x0a\x4b\xda\xf1\x5e\xc7\x27\x2b\x48\xad\x97\x6c\x62\x82\x41\x19\x13\x12\x1c\x3d\x2e\xc1\x18\xea\xf7\x27\x78\xca\xf5\xf5\x57\xde\x49\x56\xf3\x2b\xdd\xb9\x7b\x49\x67\x64\x8a\x08\xd3\x1e\x24\x8c\x1d\x32\x89\x59\x23\xa4\xa7\x6c\xce\xbe\xc7\xe6\x5e\x76\x76\x5e\x25\xed\x31\x1b\x9b\x13\x65\x3a\xad\x55\x19\xad\x7b\x03\x5c\xe4\x96\x4a\x5c\x8a\xc8\x2b\x0a\xd2\xfe\xff\x6a\xf7\x9f\x5b\xb9\xee\xbf\xd6\xfc\xd5\xf9\x76\xf3\xcb\xfe\xee\xa2\x8a\x0b\x81\x6c\x39\x06\x54\x48\xaa\xa4\xa1\xef\x49\x70\xfd\xcd\xed\xd6\xea\xab\xaf\x02\x15\xb0\x5a\xda\xdf\xdd\xeb\x3e\xff\xdb\xd7\xe1\xb6\xf2\xb8\xdd\x7c\xeb\x3f\xba\xd7\x5e\x58\x6e\x3d\x79\xea\xcf\x2f\x9c\x18\xb0\x4f\xa5\x2a\x7f\x86\x15\x6e\x2f\x7c\x6a\xbd\x59\xec\xbc\xbf\xdf\x6a\xae\x25\xac\x30\x43\x16\xa1\x89\xcb\xcb\x30\xa7\x75\x66\x26\x2f\x71\xe0\xd6\x57\xbc\x45\x95\xab\xff\xf8\x4f\x9d\xf7\xff\xf0\x17\x5f\x87\x29\x06\x86\x27\x43\x58\xf2\x37\x9b\xfe\xe6\xb6\x3f\xbf\xd2\xd9\xf9\x74\xb4\xfb\x81\xfc\xcc\xb5\x09\xdf\x29\xff\x7b\xee\x7f\x7e\x78\xe4\x3b\x52\x75\x4e\x81\xa7\x05\x62\x18\x1d\xea\x20\x98\x9b\x67\x7c\x67\x1e\x0e\x5c\xae\x0b\x41\xdd\x30\xb2\xc7\x48\x0d\xb1\x06\x04\xbf\x34\x1d\x62\x4e\x18\x90\xba\xe3\xf5\x72\x8d\x08\x58\x6a\xff\x7b\xc9\x5f\x79\xe7\x3f\x78\xe2\xef\x35\x83\x60\xca\xf1\x28\xc0\x92\xff\xf0\xaf\xad\x0f\x0f\x8e\xb0\x3c\x8a\x6d\x4f\xde\x9b\x68\x72\xb1\x91\xe6\xb8\x31\xe7\x06\xc3\x15\x32\x3d\x30\xe8\x08\x54\x76\x70\x2c\xac\x6e\x21\x81\x0c\x18\x88\xaf\x20\x81\x60\x4c\x77\xb8\x2f\x1f\x9a\x7b\x02\x3f\xd9\x88\xeb\x35\xb7\x2f\x6d\x8f\x51\x2f\x7c\xe1\xf5\xc9\xa3\xa5\x57\x2f\xbc\x3e\x55\x38\x5f\x15\xc6\xf2\xf0\x50\x61\xe2\x71\x4e\xc9\x21\x18\xab\x92\x38\xf8\x2f\x1f\xf9\x6b\x2b\x3f\x08\x07\x64\x59\x0c\x73\x9e\x4c\x63\x73\xdb\x7f\x3a\x77\xd2\x70\x07\xaa\x53\xef\x87\xf1\x29\x54\xad\x62\x16\xdf\x10\xa4\xc2\x50\x0d\x03\xce\x4c\x03\xe6\xb8\xd2\x87\xe3\xbc\x9c\xde\xa1\x1a\x89\x95\x15\xec\x15\x47\x6e\x04\xa0\xab\x59\xde\x80\xa6\x43\xb0\x2b\x7e\x15\x3c\x41\x10\x98\xaa\x41\xdc\x80\x79\x08\xb8\xc9\xa8\xe3\x10\xb7\x6a\xc0\x06\xe6\xf2\xa8\x2a\xb4\x53\xb3\xbf\x2e\x67\x76\xff\xcd\xdf\x5b\xeb\x1f\xf6\xf7\xf6\xfc\xc5\x67\x9d\x67\x2f\xfc\x7b\x5f\x12\xfc\x23\x11\x97\x97\x86\x9c\x45\x26\xe5\x5d\x22\xba\x44\xc4\xae\x38\xbf\xad\x63\x50\xc6\x15\xca\x30\xb8\xea\xe0\x1a\x76\x45\x78\xe3\xe1\x26\x23\x9e\x08\xab\x12\xdc\x70\x26\xeb\x38\x7b\x37\x60\xaf\x74\x03\x48\xbf\x41\x93\x68\x5c\x39\x1d\x85\xa0\x8a\x3a\x88\xd1\xfb\xe7\xe2\x29\xc9\x67\x48\xde\x92\xb0\xa3\x83\x8c\xbc\x32\x65\x46\xd2\xa9\x94\x3c\x9f\x3a\xa8\xd4\x5d\x53\x0e\xba\x43\xc3\x20\xb8\x48\x31\x2c\xea\xcc\x05\x33\x40\x3e\xa4\x64\x7b\xd0\xc1\x4c\x6c\x07\xc9\x4d\xaf\x83\x4c\x66\x24\x26\x53\x03\xfe\xa0\x34\x18\x32\x93\x84\xa3\x87\x84\xe1\xf0\xa3\x83\x0a\x72\x38\x8e\xab\x64\xab\xd4\xc1\xed\x3b\xfd\xe1\xd4\x0b\xec\x30\x0c\x37\xa5\xac\x27\x9a\x3d\xd0\xf6\xda\x90\x0e\x6e\xcf\x0c\xf0\xd1\x41\x66\x34\x5f\xb8\xa0\xe5\xcf\x6b\xf9\xd1\x3e\xc4\x30\xd9\xf6\xea\x92\xbf\xfd\xb0\xb3\xb1\xda\xa7\x0c\x8f\x9e\x0e\x32\x72\xee\x79\xff\xd1\xdf\xfd\x63\x6b\xe3\x4d\x77\x63\xce\x5f\x6e\x76\xff\xfc\x97\xd6\x7f\x37\x5a\xff\xd9\xea\x7c\x7c\x0b\x0a\xe7\x0b\x63\xc0\xff\x7c\x3f\x4e\x0c\x1c\x47\xe2\x67\xdf\x86\xc4\xcf\x4f\x45\xa2\xf0\x6d\x48\xfc\xe2\x54\x24\x7e\xfa\x6d\x48\x5c\x18\x20\x71\x67\x24\xd8\xed\xf1\x86\xa3\x03\x8b\x9a\x75\x79\x76\xb3\xd1\x9f\xf0\x2c\x67\xe3\x66\x40\x03\xa3\x79\xe9\x3c\x9b\x4e\xa5\x66\x25\x4c\x8d\xd6\x5d\x81\xad\xe8\x3c\x39\x58\x00\x8e\x9d\x0a\x30\x80\xb0\x09\x0f\xbf\x4d\xb8\x16\x9d\xca\x52\x97\x61\x4e\xfe\x80\x81\xd1\x3b\x85\x20\x72\x4b\x49\x9f\xfe\x48\xc6\x29\x18\x05\x61\x66\x93\x82\x0d\x0d\xf7\x88\x62\x61\x53\x8b\xeb\x2a\x60\x95\x5e\x42\xe6\x44\x2f\x7c\xe8\x65\x13\x2e\x28\x6b\x64\xcb\x52\xa7\x15\x86\x03\x9d\xcc\x23\x5b\x95\x7d\xc2\x09\xd0\x14\x5c\x2a\x92\x84\x08\x81\x95\xea\x82\xb7\x98\x13\xa6\x9f\x45\x15\x81\xd9\x2d\xe6\x1c\x98\x44\x92\x78\x7e\x55\x1c\xa5\x76\xa9\xf1\x6b\x6b\x28\xc3\x05\x12\xc4\xcc\x0c\x67\x4d\xea\x0a\xec\x8a\xdf\x29\x76\x0e\x35\x91\xac\x5a\xd6\x66\xb8\x92\x65\x38\xb8\x1e\x0e\x4d\x25\x28\x7f\x12\x41\x8c\x64\x32\x2a\x89\x5c\x0e\x98\xd4\xe5\xd4\xc1\x59\x87\x56\x87\xce\x14\x3a\x2a\x82\xda\x4d\xd1\x18\x17\x54\x22\xda\x62\xf1\x58\x19\x1e\xe8\xcf\x65\x86\x2f\x86\xfa\x59\xf5\x85\x6a\x76\x38\xf8\x4a\x15\xb6\xee\x62\x2e\xf8\xb8\xf6\x5d\x00\x00\x00\xff\xff\x41\x45\x30\x97\x73\x13\x00\x00")

func main_html() ([]byte, error) {
	return bindata_read(
		_main_html,
		"main.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"main.html": main_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"main.html": &_bintree_t{main_html, map[string]*_bintree_t{
	}},
}}
